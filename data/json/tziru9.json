{
  "body_html": "<h1><a href=\"#span,[object-object],strong,[object-object],-def-定义函数\"></a><strong>#def 定义函数</strong></h1><blockquote><p>def是Python中的一个可执行语句 —— 函数并不存在，直到Python运行了def后才存在。</p><p>def创建了一个对象，并将其赋值给一个变量名，这个变量名就是函数名。</p><p>def可以出现在任一语句可以出现的地方——甚至是嵌套在其他语句中。</p></blockquote><p><br /></p><h4><a href=\"#def-和-return-配合使用。\"></a>def 和 return 配合使用。</h4><pre data-lang=\"python\"><code>def times(x,y):  \n    return x*y    \nprint (times(2,3)) \nprint (times('mathboy',3))\n\n#output________________\n6\nmathboymathboymathboy</code></pre><p><br /></p><p>Python变量可以分为</p><ul><li><p>本地（ def 内部，除非用 global 声明）</p></li></ul><ul><li><p>全局（模块内部）</p></li></ul><ul><li><p>内置（预定义的__builtin__模块）</p></li></ul><p>全局声明global会将变量名映射到模块文件内部的作用域。</p><p><br /></p><h4><a href=\"#变量名的引用将依次查找本地、全局、内置变量。\"></a>变量名的引用将依次查找本地、全局、内置变量。</h4><pre data-lang=\"python\"><code>X = 99  \ndef add(Y):  \n    Z = X + Y  \n    return Z     \nprint add(1) \n\n#output________________\n100</code></pre><p><br /></p><p><br /></p><h4><a href=\"#使用global全局声明：\"></a>使用global全局声明：</h4><pre data-lang=\"python\"><code>X = 88\ndef func():\n    global X    #使用了global全局声明\n    X = 99\n\nfunc()        #想像一下，如果去掉 func()会如何呢？\nprint (X)\n\n#output________________\n99</code></pre><p><br /></p><pre data-lang=\"python\"><code>#print前去掉func()\nX = 88\ndef func():\nglobal X\nX = 99\nprint (X)\n#output________________\n88</code></pre><p><br /></p><pre data-lang=\"python\"><code>y,z = 1,2  \n  \ndef func():  \n    global x  \n    x = y + z  \n  \nfunc()    \nprint (x,y,z) \n#output________________\n3 1 2\n#若print前去掉func()，output________________\nNameError: name 'x' is not defined</code></pre><p><br /></p><h4><a href=\"#导入一个模块后，该模块的全局变量就成为该模块对象的属性。\"></a>导入一个模块后，该模块的全局变量就成为该模块对象的属性。</h4><p>文件间通信，不要这样做：</p><pre data-lang=\"python\"><code># first.py  \nX = 99  \n  \n# second.py  \nimport first  \nfirst.X = 88</code></pre><p>应该这样做</p><pre data-lang=\"python\"><code># first.py  \nX = 99  \n  \ndef setX(new):  \n    global X  \n    X = new  \n      \n# second.py  \nimport first  \nfirst.setX(88)</code></pre><p><br /></p><p><br /></p><h4><a href=\"#函数是可以嵌套的\"></a>函数是可以嵌套的</h4><pre data-lang=\"python\"><code>def f1():  \n    x = 88  \n    def f2():  \n        print (x)\n    f2()    \nf1()\n\n#output________________\n88</code></pre><p><br /></p><h4><a href=\"#函数可以有默认参数\"></a>函数可以有默认参数</h4><pre data-lang=\"python\"><code>def fun(a, b=3):\n    return a + b\n\n\nprint(fun(1, 2))\nprint(fun(2))\n\n#output________________\n3\n5\n\n#含义 只输一个变量，另一个就默认</code></pre><p><br /></p><h4><a href=\"#def中还可以使用lambda表达式\"></a>def中还可以使用lambda表达式</h4><pre data-lang=\"python\"><code>def func():  \n    x = 4  \n    action = (lambda n: x**n)  \n    return action  \n  \nf = func()  \nprint (f(3))\n\n#output________________\n64</code></pre><blockquote><p>Lambda表达式是Python中一类特殊的定义函数的形式，使用它可以定义一个匿名函数。与其它语言不同，Python的Lambda表达式的函数体只能有唯一的一条语句，也就是返回值表达式语句。</p><pre data-lang=\"python\"><code># 下面是个Lambda表达式的例子：\nli=[{&quot;age&quot;:20,&quot;name&quot;:&quot;def&quot;},{&quot;age&quot;:25,&quot;name&quot;:&quot;abc&quot;},{&quot;age&quot;:10,&quot;name&quot;:&quot;ghi&quot;}]\nli=sorted(li,key=lambda x:x[&quot;age&quot;])\nprint(li)\n\n# 如果不用Lambda表达式，而要写成常规的函数，那么需要这么写\ndef comp(x):\n    return x[&quot;age&quot;]\nli=[{&quot;age&quot;:20,&quot;name&quot;:&quot;def&quot;},{&quot;age&quot;:25,&quot;name&quot;:&quot;abc&quot;},{&quot;age&quot;:10,&quot;name&quot;:&quot;ghi&quot;}]\nli=sorted(li,key=comp)\nprint(li)</code></pre></blockquote><p><br /></p><p><br /></p><p>Python函数中，不可变参数（例如<strong>数字和字符串</strong>）是“通过值”进行传递的，可变对象（例如<strong>列表和字典</strong>）是通过“指针”进行传递的。</p><pre data-lang=\"python\"><code>def func(a,b):  \n    a = 1  \n    b.append(1)  \n      \nx = 0  \ny = [0]  \nfunc(x,y)  \nprint x,y \n\n#output________________\n0 [0, 1]</code></pre><p><br /></p><p>Python函数的返回值可以有多个变量，相当于返回的是一个元组，只是圆括号()被省略了。例如：</p><pre data-lang=\"python\"><code>def set(a,b):  \n    a = 3.14  \n    b = [1,2,3]  \n    return a,b  \n      \nx = 6.28  \ny = [4,5,6]  \nx,y = set(x,y)  \nprint x  \nprint y \n\n#output________________\n3.14  \n[1, 2, 3]</code></pre><p><br /></p><p>Python支持关键字参数，所有基于位置的参数将首先按照从左到右的顺序匹配头部的参数，之后再进行基于变量名的关键字匹配。例如：</p><pre data-lang=\"python\"><code>def fun(a,b,c):  \n    print a,b,c  \n  \nfun(1,c=3,b=2)  \nfun(c=3,a=1,b=2)\n\n#output________________\n1 2 3  \n1 2 3</code></pre><p><br /></p><p>之后的暂时看不懂</p><p><br /></p><hr /><p><br /></p><p><br /></p><p style=\"text-align: right;\"><a href=\"http://blog.csdn.net/mathboylinlin/article/details/9401407\" target=\"_blank\">http://blog.csdn.net/mathboylinlin/article/details/9401407</a> 原文链接</p><p><br /></p>",
  "slug": 580854,
  "title": "def( )"
}