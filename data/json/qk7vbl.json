{
  "body_html": "<pre data-lang=\"python\"><code>import pandas as pd\nimport numpy as np</code></pre><p><br /></p><p>导入文件</p><pre data-lang=\"python\"><code>df = pd.read_excel(&quot;sample-salesv3.xlsx&quot;)</code></pre><p><br /></p><p>快速浏览一下数据类型，以确保所以事情都能如预期一样运行。</p><pre data-lang=\"python\"><code>print(df.dtypes)\n\n#output\naccount number int64\nname object\nsku object\nquantity int64\nunit price float64\next price float64\ndate object\ndtype: object</code></pre><p><br /></p><p>将 date 列转换为日期对象：</p><pre data-lang=\"python\"><code>df['date'] = pd.to_datetime(df['date'])\nprint(df.dtypes)\n\n#output\naccount number             int64\nname                      object\nsku                       object\nquantity                   int64\nunit price               float64\next price                float64\ndate              datetime64[ns]\ndtype: object\n\n#现在，data变成了一个datetime类型的对象。</code></pre><p><br /></p><h3 id=\"yZdSP\"><a href=\"#span,[object-object],strong,[object-object],筛选数据\"></a><strong>筛选数据</strong></h3><p>使用pandas来筛选和选择某个特定数据的子集。</p><p><br /></p><p><img src=\"https://lark-assets-prod.oss-cn-hangzhou.aliyuncs.com/2018/png/b7d5773f-2609-46c4-b782-43b9075e0e41.png#align=left&amp;display=inline&amp;height=656&amp;originHeight=656&amp;originWidth=1182&amp;status=done&amp;width=514\" style=\"max-width: 600px; width: 514px;\" /></p><p><br /></p><p>根据字段的值来筛选</p><pre data-lang=\"python\"><code>#根据字段的值来筛选。使用head函数来显示前面几个结果,这仅仅是为了让本文保持简短。\ndf[df[&quot;account number&quot;]==307599].head()\n\n#还可以以数值为基准来进行筛选\ndf[df[&quot;quantity&quot;] &amp;gt; 22].head()</code></pre><p><br /></p><p>复杂筛选</p><pre data-lang=\"python\"><code>#从B1中查找以“sku”中起始的项目\ndf[df[&quot;sku&quot;].map(lambda x: x.startswith('B1'))].head()</code></pre><p><br /></p><p>把两个或更多的语句连接起来很简单，用&amp;就可以</p><pre data-lang=\"python\"><code>df[df[&quot;sku&quot;].map(lambda x: x.startswith('B1')) &amp;amp; (df[&quot;quantity&quot;] &amp;gt; 22)].head()</code></pre><p><br /></p><p>pandas支持的另外一个很有用的函数是<code>isin</code>。它使得我们可以定义一个列表，里面包含我们所希望查找的值。</p><p>在这个例子中，我们查找包含两个特定account number值的全部项目。</p><pre data-lang=\"python\"><code>df[df[&amp;quot;account number&amp;quot;].isin([714466,218895])].head()</code></pre><p><br /></p><p>pandas支持的另外一个函数叫做<code>query</code>，它使得我们可以有效的在数据集中选择数据。使用它需要安装<a href=\"https://github.com/pydata/numexpr\" target=\"_blank\">numexpr</a>，所以请确保你在进行下面步骤前已经进行了安装。如果你想要通过名字来得到一个消费者列表，你可以使用query来完成，和前面展示的python语法类似。</p><pre data-lang=\"python\"><code>df.query('name == [&quot;Kulas Inc&quot;,&quot;Barton LLC&quot;]').head()</code></pre><p><br /></p><h3 id=\"9LyEh\"><a href=\"#span,[object-object],strong,[object-object],处理日期\"></a><strong>处理日期</strong></h3><p>使用pandas，你可以对日期进行更加复杂的筛选。在我们处理日期前，我建议你把日期栏进行一个排序，以便返回的结果如你所愿。</p><pre data-lang=\"python\"><code>df = df.sort('date')\ndf.head()</code></pre><p><br /></p><p>在操作日期前，为您展示python的筛选语法。</p><pre data-lang=\"python\"><code>df[df['date'] &amp;gt;='20140905'].head()</code></pre><p><br /></p><p>pandas的一个特别棒的特性是它能够理解日期，所以它允许我们进行部分筛选。如果我只想要查看最近几个月的日期数据，我可以这样做。</p><pre data-lang=\"python\"><code>df[df['date'] &amp;gt;='2014-03'].head()</code></pre><p><br /></p><p>当然，你可以把筛选标准链接起来。</p><pre data-lang=\"python\"><code>df[(df['date'] &gt;='20140701') &amp; (df['date'] &lt;= '20140715')].head()</code></pre><p><br /></p><p>由于pandas可以理解日期列，所以可以将日期值设为不同的格式，都会得到正确的结果。</p><pre data-lang=\"python\"><code>df[df['date'] &amp;gt;= '10-10-2014'].head()</code></pre><p><br /></p><p>当操作时间序列数据时，如果你把数据进行转化，以日期作为索引，我们可以做一些变相的筛选。</p><p>使用<code>set_index</code> 来设置新的索引。</p><pre data-lang=\"python\"><code>df2 = df.set_index(['date'])\ndf2.head()</code></pre><p><br /></p><p>你可以通过切分数据来获取一段区间。</p><pre data-lang=\"python\"><code>df2[&quot;20140101&quot;:&quot;20140201&quot;].head()</code></pre><p><br /></p><p><br /></p><p><br /></p><p><br /></p><p><br /></p><p><br /></p><p><br /></p><p style=\"text-align: right;\"><a href=\"http://python.jobbole.com/80972/\" target=\"_blank\">http://python.jobbole.com/80972/</a></p><p><br /></p>",
  "slug": 580864,
  "title": "操作 Excel 文件"
}