{
  "body_html": "<h2><a href=\"#span,[object-object],strong,[object-object],ø-基本常用查询\"></a><strong>Ø 基本常用查询</strong></h2><pre data-lang=\"sql\"><code>-- all 查询所有,几乎从来不用 all 关键字,因为是默认关键字\nselect all sex from student;\n \n-- distinct 过滤重复 (常用语检查一列数据是否有异常值)\nselect distinct sex from student;\n \n-- count 统计\nselect count(distinct sex) from student;\n \n-- top 取前N条记录\nselect top 3 * from student;\n \n-- column 列运算\nselect (age + id) col from student;\nselect s.name + '-' + c.name from classes c, student s where s.cid = c.id;\n \n-- having 分组过滤条件\n-- 按照年龄分组，过滤年龄为空的数据，并且统计分组的条数和现实年龄信息\nselect count(*), age from student group by age having age is not null;\n \n-- 按照年龄和cid组合分组，过滤条件是cid大于1的记录\nselect count(*), cid, sex from student group by cid, sex having cid &gt; 1;\n \n-- 按照年龄分组，过滤条件是分组后的记录条数大于等于2\nselect count(*), age from student group by age having count(age) &gt;= 2;\n \n-- 按照cid和性别组合分组，过滤条件是cid大于1，cid的最大值大于2\nselect count(*), cid, sex from student group by cid, sex having cid &gt; 1 and max(cid) &gt; 2;</code></pre><p><br /></p><h2><a href=\"#span,[object-object],strong,[object-object],ø-嵌套子查询\"></a><strong>Ø 嵌套子查询</strong></h2><p>子查询是一个嵌套在select、insert、update 或 delete 语句或其他子查询中的查询。任何允许使用表达式的地方都可以使用子查询。子查询也称为内部查询或内部选择，而包含子查询的语句也成为外部查询或外部选择。</p><pre data-lang=\"sql\"><code>-- 将一个 table 的查询结果当做一个新表进行查询\nselect * from (\n    select id, name from student where sex = 1\n) t where t.id &gt; 2;</code></pre><p>上面括号中的语句，就是子查询语句（内部查询）。在外面的是外部查询，其中外部查询可以包含以下语句：</p><p>     1、 包含常规选择列表组件的常规select查询</p><p>     2、 包含一个或多个表或视图名称的常规from语句</p><p>     3、 可选的where子句</p><p>     4、 可选的group by子句</p><p>     5、 可选的having子句</p><pre data-lang=\"sql\"><code>-- 查询班级信息，统计班级学生人生\nselect *, (select count(*) from student where cid = classes.id) as num \nfrom classes order by num;\n \n-- 查询班级id大于小于X的这些班级的学生信息\nselect * from student where cid in (\n    select id from classes where id &gt; 2 and id &lt; 4);\n \n-- 查询不是X班的学生信息\nselect * from student where cid not in (\n    select id from classes where name = '2班')\n \n-- all,any,some\nselect * from student where cid = 5 and age &gt; all (\n    select age from student where cid = 3);\n \nselect * from student where cid = 5 and age &gt; any (\n    select age from student where cid = 3);\n \nselect * from student where cid = 5 and age &gt; some (\n    select age from student where cid = 3);</code></pre><p><br /></p><h2><a href=\"#span,[object-object],strong,[object-object],ø-聚合查询\"></a><strong>Ø 聚合查询</strong></h2><h3><a href=\"#span,[object-object],strong,[object-object],1、-distinct去掉重复数据\"></a><strong>1、 distinct去掉重复数据</strong></h3><pre data-lang=\"sql\"><code>select distinct sex from student;\nselect count(sex), count(distinct sex) from student;</code></pre><p><br /></p><h3><a href=\"#span,[object-object],strong,[object-object],2、-compute和compute-by汇总查询\"></a><strong>2、 compute和compute by汇总查询</strong></h3><pre data-lang=\"sql\"><code>-- 对年龄大于20的进行汇总\nselect age from student where age &gt; 20 order by age compute sum(age) by age;\n \n-- 对年龄大于20的按照性别进行分组汇总年龄信息\nselect id, sex, age from student where age &gt; 20 order by sex, age compute sum(age) by sex;\n \n-- 按照年龄分组汇总\nselect age from student where age &gt; 20 order by age, id compute sum(age);\n \n-- 按照年龄分组，年龄汇总，id找最大值\nselect id, age from student where age &gt; 20 order by age compute sum(age), max(id);</code></pre><p>compute 进行汇总，前面是查询的结果，后面一条结果集就是汇总的信息。compute 子句中可以添加多个汇总表达式，可以添加的信息如下：</p><p>     a、 可选by关键字。它是每一列计算指定的行聚合</p><p>     b、 行聚合函数名称。包括sum、avg、min、max、count等</p><p>     c、 要对其执行聚合函数的列</p><p>compute by适合做先分组后汇总的业务。compute by 后面的列一定要是 order by 中出现的列。</p><p><br /></p><h3><a href=\"#span,[object-object],strong,[object-object],3、-cube-汇总\"></a><strong>3、 cube 汇总</strong></h3><p>cube汇总和compute效果类似，但语法较简洁，而且返回的是一个结果集。</p><pre data-lang=\"sql\"><code>select count(*), sex from student group by sex with cube;\nselect count(*), age, sum(age) from student where age is not null group by age with cube;</code></pre><p>cube要结合group by语句完成分组汇总</p><p><br /></p><h2><a href=\"#span,[object-object],strong,[object-object],ø-排序函数\"></a><strong>Ø 排序函数</strong></h2><p>   排序在很多地方需要用到，需要对查询结果进行排序并且给出序号。比如：</p><p>   1、 对某张表进行排序，序号需要递增不重复的</p><p>   2、 对学生的成绩进行排序，得出名次，名次可以并列，但名次的序号是连续递增的</p><p>   3、 在某些排序的情况下，需要跳空序号，虽然是并列</p><pre data-lang=\"sql\"><code>-- 基本语法 \n-- 排序函数 over([分组语句] 排序子句[desc][asc])\n-- 排序子句 order by 列名, 列名\n-- 分组子句 partition by 分组列, 分组列\n \n \n-- row_number 函数\n-- 根据排序子句给出递增连续序号,按照名称排序的顺序递增\nselect s.id, s.name, cid, c.name, row_number() over(order by c.name) as number \nfrom student s, classes c where cid = c.id;\n \n-- rank 函数函数 \n-- 根据排序子句给出递增的序号，但是存在并列并且跳空 \n-- 顺序递增\nselect id, name, rank() over(order by cid) as rank from student;\n \n-- dense_rank 函数 \n-- 根据排序子句给出递增的序号，但是存在并列不跳空 \nselect s.id, s.name, cid, c.name, dense_rank() over(order by c.name) as dense \nfrom student s, classes c where cid = c.id;\n \n-- partition by 分组子句 \n-- 可以完成对分组的数据进行增加排序，partition by可以与以上三个函数联合使用。 \nselect s.id, s.name, cid, c.name, row_number() over(partition by c.name order by s.id) as rank \nfrom student s, classes c where cid = c.id;\n \nselect s.id, s.name, cid, c.name, rank() over(partition by c.name order by s.id) as rank \nfrom student s, classes c where cid = c.id;\n \nselect s.id, s.name, cid, c.name, dense_rank() over(partition by c.name order by s.id) as rank \nfrom student s, classes c where cid = c.id;\n \n-- ntile 平均排序函数 \n-- 将要排序的数据进行平分，然后按照等分排序。ntile中的参数代表分成多少等分。 \nselect s.id, s.name, cid, c.name, ntile(5) over(order by c.name) as ntile \nfrom student s, classes c where cid = c.id;</code></pre><p><br /></p><h2><a href=\"#span,[object-object],strong,[object-object],ø-集合运算\"></a><strong>Ø 集合运算</strong></h2><p>操作两组查询结果，进行交集、并集、减集运算</p><pre data-lang=\"sql\"><code>-- union 并集、不重复\nselect id, name from student where name like 'ja%'\nunion select id, name from student where id = 4;\n \n-- union all 并集、重复\nselect * from student where name like 'ja%'\nunion all select * from student;\n \n-- 交集（相同部分）\nselect * from student where name like 'ja%'\nintersect select * from student;\n \n-- 减集（除相同部分）\nselect * from student where name like 'ja%'\nexcept select * from student where name like 'jas%';</code></pre><p><br /></p><h2><a href=\"#span,[object-object],strong,[object-object],ø-公式表表达式\"></a><strong>Ø 公式表表达式</strong></h2><p>查询表的时候，有时候中间表需要重复使用，这些子查询被重复查询调用，不但效率低，而且可读性低，不利于理解。那么公式表表达式可以解决这个问题。</p><p>我们可以将公式表表达式（CET）视为临时结果集，在select、insert、update、delete或是create view语句的执行范围内进行定义。</p><pre data-lang=\"sql\"><code>with statNum(id, num) as \n(select cid, count(*) from student where id &gt; 0 group by cid)\nselect id, num from statNum order by id;\n \nwith statNum(id, num) as \n(select cid, count(*) from student where id &gt; 0 group by cid)\nselect max(id), avg(num) from statNum;</code></pre><p><br /></p><h2><a href=\"#span,[object-object],strong,[object-object],ø-表的联合查询\"></a><strong>Ø 表的联合查询</strong></h2><pre data-lang=\"sql\"><code>-- 简化联接查询\nselect s.id, s.name, c.id, c.name from student s, classes c where s.cid = c.id;\n \n-- 左连接 (左为基表)\nselect s.id, s.name, c.id, c.name from student s left join classes c on s.cid = c.id;\n \n-- 右连接 (右为基表)\nselect s.id, s.name, c.id, c.name from student s right join classes c on s.cid = c.id;\n \n-- 内连接 (等值联合)\nselect s.id, s.name, c.id, c.name from student s inner join classes c on s.cid = c.id;\n \n-- 交叉联接查询，结果是一个笛卡儿乘积\nselect s.id, s.name, c.id, c.name from student s ,classes c\n \n-- 自连接\nselect distinct s.* from student s, student s1 where s.id &lt;&gt; s1.id and s.sex = s1.sex;</code></pre><p><br /></p><h2><a href=\"#span,[object-object],strong,[object-object],ø-函数\"></a><strong>Ø 函数</strong></h2><h3><a href=\"#span,[object-object],strong,[object-object],聚合函数\"></a><strong>聚合函数</strong></h3><pre data-lang=\"sql\"><code>-- 聚合函数 (max最大值、min最小值、count统计、avg平均值、sum求和、var求方差)\nselect \n    max(age) max_age, \n    min(age) min_age, \n    count(age) count_age, \n    avg(age) avg_age, \n    sum(age) sum_age, \n    var(age) var_age \nfrom student;</code></pre><h3><a href=\"#时间日期函数\"></a>时间日期函数</h3><pre data-lang=\"sql\"><code>select dateAdd(day, 3, getDate());\nselect dateAdd(year, 3, getDate());\nselect dateAdd(hour, 3, getDate());\nselect dateDiff(day, '2011-06-20', getDate());\nselect dateDiff(second, '2011-06-22 11:00:00', getDate());\nselect dateDiff(hour, '2011-06-22 10:00:00', getDate());\nselect dateName(month, getDate());\nselect dateName(minute, getDate());\nselect dateName(weekday, getDate());\nselect datePart(month, getDate());\nselect datePart(weekday, getDate());\nselect datePart(second, getDate());\nselect day(getDate());\nselect day('2011-06-30');\nselect month(getDate());\nselect month('2011-11-10');\nselect year(getDate());\nselect year('2010-11-10');\nselect getDate();\nselect getUTCDate();</code></pre><p><br /></p><h3><a href=\"#数学函数\"></a>数学函数</h3><pre data-lang=\"sql\"><code>-- 数学函数 \nselect pi();\nselect rand(100), rand(50), rand();\nselect round(rand(), 3), round(rand(100), 5);\nselect round(123.456, 2), round(254.124, -2);\nselect round(123.4567, 1, 2);</code></pre><p><br /></p><h3><a href=\"#元数据\"></a>元数据</h3><pre data-lang=\"sql\"><code>-- 元数据 \nselect col_name(object_id('student'), 1); // 返回列名\nselect col_name(object_id('student'), 2);\n-- 该列数据类型长度\nselect col_length('student', col_name(object_id('student'), 2)); \n-- 该列数据类型长度\nselect col_length('student', col_name(object_id('student'), 1)); \n-- 返回类型名称、类型id\nselect type_name(type_id('varchar')), type_id('varchar');\n-- 返回列类型长度\nselect columnProperty(object_id('student'), 'name', 'PRECISION');\n-- 返回列所在索引位置\nselect columnProperty(object_id('student'), 'sex', 'ColumnId');</code></pre><p><br /></p><h3><a href=\"#字符串函数\"></a>字符串函数</h3><pre data-lang=\"sql\"><code>-- 字符串函数 \nselect ascii('a');\nselect ascii('A');\nselect char(97);\nselect char(65);\nselect nchar(65);\nselect nchar(45231);\nselect nchar(32993);\nselect unicode('A'), unicode('中');\nselect soundex('hello'), soundex('world'), soundex('word');\nselect patindex('%a', 'ta'), patindex('%ac%', 'jack'), patindex('dex%', 'dexjack');\nselect 'a' + space(2) + 'b', 'c' + space(5) + 'd';\nselect charIndex('o', 'hello world');\nselect charIndex('o', 'hello world', 6);\nselect quoteName('abc[]def'), quoteName('123]45');\nselect str(123.456, 2), str(123.456, 3), str(123.456, 4);\nselect str(123.456, 9, 2), str(123.456, 9, 3), str(123.456, 6, 1), str(123.456, 9, 6);\nselect difference('hello', 'helloWorld');\nselect difference('hello', 'world');\nselect difference('hello', 'llo');\nselect difference('hello', 'hel');\nselect difference('hello', 'hello');\nselect replace('abcedef', 'e', 'E');\nselect stuff('hello world', 3, 4, 'ABC');\nselect replicate('abc#', 3);\nselect subString('abc', 1, 1), subString('abc', 1, 2), subString('hello Wrold', 7, 5);\nselect len('abc');\nselect reverse('sqlServer'); \nselect left('leftString', 4);\nselect left('leftString', 7);\nselect right('leftString', 6);\nselect right('leftString', 3);\nselect lower('aBc'), lower('ABC');\nselect upper('aBc'), upper('abc');\nselect ltrim(' abc'), ltrim('# abc#'), ltrim('  abc');\nselect rtrim(' abc    '), rtrim('# abc#   '), rtrim('abc');</code></pre><p><br /></p><h3><a href=\"#安全函数\"></a>安全函数</h3><pre data-lang=\"sql\"><code>select current_user;\nselect user;\nselect user_id(), user_id('dbo'), user_id('public'), user_id('guest');\nselect user_name(), user_name(1), user_name(0), user_name(2);\nselect session_user;\nselect suser_id('sa');\nselect suser_sid(), suser_sid('sa'), suser_sid('sysadmin'), suser_sid('serveradmin');\nselect is_member('dbo'), is_member('public');\nselect suser_name(), suser_name(1), suser_name(2), suser_name(3);\nselect suser_sname(), suser_sname(0x01), suser_sname(0x02), suser_sname(0x03);\nselect is_srvRoleMember('sysadmin'), is_srvRoleMember('serveradmin');\nselect permissions(object_id('student'));\nselect system_user;\nselect schema_id(), schema_id('dbo'), schema_id('guest');\nselect schema_name(), schema_name(1), schema_name(2), schema_name(3);</code></pre><p><br /></p><h3><a href=\"#系统函数\"></a>系统函数</h3><pre data-lang=\"sql\"><code>-- 系统函数\nselect app_name(); // 当前会话的应用程序名称\nselect cast(2011 as datetime), cast('10' as money), cast('0' as varbinary); // 类型转换\nselect convert(datetime, '2011'); // 类型转换\nselect coalesce(null, 'a'), coalesce('123', 'a'); // 返回其参数中第一个非空表达式\nselect collationProperty('Traditional_Spanish_CS_AS_KS_WS', 'CodePage');\nselect current_timestamp; // 当前时间戳\nselect current_user;\nselect isDate(getDate()), isDate('abc'), isNumeric(1), isNumeric('a');\nselect dataLength('abc');\nselect host_id();\nselect host_name();\nselect db_name();\nselect ident_current('student'), ident_current('classes'); // 返回主键id的最大值\nselect ident_incr('student'), ident_incr('classes'); // id的增量值\nselect ident_seed('student'), ident_seed('classes');\nselect @@identity; // 最后一次自增的值\nselect @@rowcount; // 影响行数\nselect @@cursor_rows; // 返回连接上打开的游标的当前限定行的数目\nselect @@error; // T-SQL的错误号\nselect @@procid;</code></pre><p><br /></p><h3><a href=\"#配置函数\"></a>配置函数</h3><pre data-lang=\"sql\"><code>set datefirst 7; // 设置每周的第一天，表示周日\nselect @@datefirst as '星期的第一天', datepart(dw, getDate()) AS '今天是星期';\nselect @@dbts; // 返回当前数据库唯一时间戳\nset language 'Italian';\nselect @@langId as 'Language ID'; // 返回语言id\nselect @@language as 'Language Name';// 返回当前语言名称\nselect @@lock_timeout; // 返回当前会话的当前锁定超时设置（毫秒）\nselect @@max_connections; // 返回SQL Server 实例允许同时进行的最大用户连接数\nselect @@MAX_PRECISION AS 'Max Precision'; // 返回decimal 和numeric 数据类型所用的精度级别\nselect @@SERVERNAME; // SQL Server 的本地服务器的名称\nselect @@SERVICENAME; // 服务名\nselect @@SPID; // 当前会话进程id\nselect @@textSize;</code></pre><p><br /></p><h3><a href=\"#系统统计函数\"></a>系统统计函数</h3><pre data-lang=\"sql\"><code>-- 系统统计函数 \nselect @@CONNECTIONS;\nselect @@PACK_RECEIVED;\nselect @@CPU_BUSY;\nselect @@PACK_SENT;\nselect @@TIMETICKS;\nselect @@IDLE;\nselect @@TOTAL_ERRORS;\nselect @@IO_BUSY;\nselect @@TOTAL_READ;\nselect @@PACKET_ERRORS;\nselect @@TOTAL_WRITE;\nselect patIndex('%soft%', 'microsoft SqlServer');\nselect patIndex('soft%', 'software SqlServer');\nselect patIndex('%soft', 'SqlServer microsoft');\nselect patIndex('%so_gr%', 'Jsonisprogram');</code></pre><p><br /></p><h3><a href=\"#自定义函数\"></a>自定义函数</h3><pre data-lang=\"sql\"><code>-- 查询所有已创建函数\nselect definition,* from sys.sql_modules m join sys.objects o on m.object_id = o.object_id\nand type in('fn', 'if', 'tf');\n \n-- 创建函数\nif (object_id('fun_add', 'fn') is not null)\n    drop function fun_add\ngo\ncreate function fun_add(@num1 int, @num2 int)\n    returns int\nwith execute as caller\nas\n    begin\n        declare @result int;\n        if (@num1 is null)\n            set @num1 = 0;\n        if (@num2 is null)\n            set @num2 = 0;\n        set @result = @num1 + @num2;\n        return @result;\n    end\ngo\n-- 调用函数\nselect dbo.fun_add(id, age) from student;\n \n-- 自定义函数，字符串连接\nif (object_id('fun_append', 'fn') is not null)\n    drop function fun_append\ngo\ncreate function fun_append(@args nvarchar(1024), @args2 nvarchar(1024))\n    returns nvarchar(2048)\nas\n    begin\n        return @args + @args2;\n    end\ngo \nselect dbo.fun_append(name, 'abc') from student;\n\n-- 修改函数\nalter function fun_append(@args nvarchar(1024), @args2 nvarchar(1024))\n    returns nvarchar(1024)\nas\n    begin\n        declare @result varchar(1024);    \n        -- coalesce返回第一个不为null的值    \n        set @args = coalesce(@args, '');\n        set @args2 = coalesce(@args2, '');;\n        set @result = @args + @args2;\n        return @result;\n    end\ngo\nselect dbo.fun_append(name, '#abc') from student;\n \n-- 返回table对象函数\nselect name, object_id, type from sys.objects where type in ('fn', 'if', 'tf') or type like '%f%';\nif (exists (select * from sys.objects where type in ('fn', 'if', 'tf') and name = 'fun_find_stuRecord'))\n    drop function fun_find_stuRecord\ngo\ncreate function fun_find_stuRecord(@id int)\n    returns table\nas\n    return (select * from student where id = @id);\ngo\nselect * from dbo.fun_find_stuRecord(2);</code></pre><p><br /></p>",
  "slug": 584240,
  "title": "sql高级函数汇总"
}