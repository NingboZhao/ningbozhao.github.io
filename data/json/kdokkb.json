{
  "body_html": "<h3><a href=\"#正则表达式基础\"></a>正则表达式基础</h3><p>正则表达式是用于处理字符串的强大工具，拥有自己独特的语法以及一个独立的处理引擎，效率上可能不如str自带的方法，但功能十分强大。得益于这一点，在提供了正则表达式的语言里，正则表达式的语法都是一样的，区别只在于不同的编程语言实现支持的语法数量不同；但不用担心，不被支持的语法通常是不常用的部分。</p><p><br /></p><p>正则表达式的大致匹配过程是：</p><p>依次拿出表达式和文本中的字符比较，如果每一个字符都能匹配，则匹配成功；一旦有匹配不成功的字符则匹配失败。</p><p>如果表达式中有量词或边界，这个过程会稍微有一些不同，但也是很好理解的，看下图中的示例以及自己多使用几次就能明白。</p><p><br /></p><p>下图列出了Python支持的正则表达式元字符和语法：  </p><img src=\"https://lark-assets-prod.oss-cn-hangzhou.aliyuncs.com/2018/png/15314f85-166a-4a96-8b94-f10b9374612a.png#width=638\" style=\"max-width: 600px; width: 638px;\" /><p><br /></p><p><br /></p><h3><a href=\"#re模块\"></a>re模块</h3><p>Python通过<code>re模块</code>提供对正则表达式的支持。使用re的一般步骤是先将正则表达式的字符串形式编译为<code>Pattern实例</code>，然后使用Pattern实例处理文本并获得匹配结果（一个<code>Match实例</code>），最后使用Match实例获得信息，进行其他的操作。</p><p><br /></p><pre data-lang=\"python\"><code>import re\n \n# 将正则表达式编译成Pattern对象\npattern = re.compile(r'hello')\n \n# 使用Pattern匹配文本，获得匹配结果，无法匹配时将返回None\nmatch = pattern.match('hello world!')\n \nif match:\n    # 使用Match获得分组信息\n    print match.group()\n \n### 输出 ###\n# hello</code></pre><p><br /></p><p><br /></p><p><br /></p><p><br /></p><p><br /></p><p><br /></p><p><br /></p><p><br /></p><p><br /></p><p><br /></p><p><br /></p><p><br /></p><p><br /></p><p><br /></p><p><br /></p><hr /><p><a href=\"http://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html\" target=\"_blank\">http://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html</a></p>",
  "slug": 580917,
  "title": "正则表达式"
}